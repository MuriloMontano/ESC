// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16 (a=x, b=false, sel=zx, out=newX0);

    Nand16 (a=newX0, b=true, out=tempX0);
    Mux16 (a=newX0, b=tempX0, sel=nx, out=newX1);

    Mux16 (a=y, b=false, sel=zy, out=newY0);

    Nand16 (a=newY0, b=true, out=tempY0);
    Mux16 (a=newY0, b=tempY0, sel=ny, out=newY1);

    And16 (a=newX1, b=newY1, out=xAndy);
    Add16 (a=newX1, b=newY1, out=xSumy);
    Mux16 (a=xAndy, b=xSumy, sel=f, out=tempOut0);

    Nand16 (a=tempOut0, b=true, out=tempOut1);
    Mux16 (a=tempOut0, b=tempOut1, sel=no, out=tempOut2, out[15]=ngTemp, out=out);

    Or16Way (in=tempOut2, out=zrTemp);
    Not (in=zrTemp, out=zr);

    And (a=ngTemp, b=true, out=ng);
}
